import Head from 'next/head'
import Link from 'next/link'
import Image from 'next/image';
import { useState, useEffect, createRef } from 'react'
import Field from '../../components/Field';
import { ArrowSmRightIcon } from '@heroicons/react/solid'

import ConnectWalletField from '../../components/ConnectWalletField';

import prisma from '../../lib/prisma';

export default function Edit({ form, fields }) {
  const address = createRef();
  const [contract, setContract] = useState({});
  const [errors, setErrors] = useState({});

  const [focusedField, setFocusedField] = useState(null);

  const field1 = createRef();

  function handleClick(e) {
    console.log('working')
    debugger
    const fields = [field1];
    console.log(e.target)
    if (fields.closest(e.target)) {
      if (focusedField === e.target) {
        return;
      }
      return setFocusedField(e.target);
    } else if (focusedField) {
      return setFocusedField(null);
    }
  }

  return (
    <div className='relative min-h-screen'>
      <Head>
        <title>Pick your contract</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <header className='sticky top-0 bg-white z-10 shadow'>
        <div className='relative flex items-center justify-between p-4 py-3'>
          <span>←</span>
          <div className='absolute left-1/2 transform -translate-x-1/2 cursor-pointer flex justify-center items-center h-9 w-8 p-1 rounded-md bg-blue-500'>
            <div className='text-white italic font-lora font-medium text-2xl'>F</div>
          </div>
          <button className="cursor-default h-min tracking-tight bg-blue-500 transition duration-200 hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 hover:text-blue-50 py-2 px-4 rounded-lg font-medium text-white">Publish</button>
        </div>
      </header>
      <main className='font-lora flex flex-col items-center mx-auto mb-64'>
        <div className={`background-pattern w-full h-52`}></div>
        <section className={`-mt-32  mb-8 bg-white p-8 pt-10 sm:rounded-xl shadow max-w-lg mx-auto w-full`}>
          <textarea rows='1' autoFocus onFocus={e => e.target.select()} type="text" placeholder="Add a Title..." className={`mb-[11px] focus:mb-[10px] pb-1 border-b focus:border-b-2 border-transparent hover:border-gray-300 focus:border-blue-500 w-full placeholder:text-gray-800 focus:placeholder:text-gray-400  font-lora text-4xl font-medium text-center transition duration-200 focus:outline-none`} />
          <textarea rows="1" onFocus={e => e.target.select()} placeholder="Add a description..." className='mb-[23px] focus:mb-[22px] pb-1 border-b focus:border-b-2 border-transparent hover:border-gray-300 focus:border-blue-500 w-full text-gray-500 placeholder:text-gray-500 focus:placeholder:text-gray-400 font-lora text-center transition duration-200 focus:outline-none'/>
          <div className='flex flex-col border rounded-lg'>
            <div className='flex p-4 flex-wrap'>
              <div className='flex-1 mr-4'>
                <h4 className='uppercase text-xs text-gray-400 tracking-wider font-karla mb-2 whitespace-nowrap'>Contract</h4>
                <h2 className='text-lg break-all leading-6'>{form.contractName}</h2>
              </div>
              <div className='flex-1 mr-4'>
                <h4 className='uppercase text-xs text-gray-400 tracking-wider font-karla mb-2 whitespace-nowrap'>What&apos;ll This do?</h4>
                <p className='text-lg break-all leading-6'>{form.method}</p>
              </div>
            </div>
            <Link href={`https://etherscan.io/token/${form.address}`}>
              <a target='_blank' className='cursor-pointer hover:bg-gray-50 rounded-b-lg border-t px-4 py-2 flex items-center justify-center transition duration-200 space-x-1.5'>
                <Image src='/etherscan-logo-circle.svg' width={16} height={16} />
                <span className='text-xs text-gray-500'>See on Etherscan</span>
              </a>
            </Link>
          </div>
        </section>
        <div className='space-y-8'>
          {fields.map(field => 
            <Field key={field.id}
                  //  handleClick={handleClick} 
                   name={field.name}
                   type={field.type} 
                   title={field.title}
                   description={field.description} 
            />
          )}
          {/* <div ref={field1} id='field1' onClick={(e) => handleClick} className='w-full group'>
            <div className='p-8 w-full max-w-lg mx-auto rounded-lg hover:ring-1 group-hover:bg-gray-100/50 hover:ring-gray-200/60 transition duration-200'>
              <div className=''>
                <div className='flex items-baseline justify-between'>
                  <h2 name="title" className='text-2xl mb-4 mr-4 group-hover:text-sm transition-text duration-200'>renounceOwnership</h2>
                  <span className='text-xs text-gray-400 font-karla'>uint256</span>
                </div>
                <input name="title" placeholder="Write a useful prompt..." className={`${focusedField === 'field1' ? 'block' : 'hidden'} placeholder:text-gray-400 border bg-white focus:ring-1 w-full text-2xl mb-2  rounded-lg p-2 px-4 transition duration-200 hover:text-gray-800 focus:text-gray-800 hover:border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500`}/>
                <input name="description" placeholder="Write some helper text..." className={`${focusedField === 'field1' ? 'block' : 'hidden'} placeholder:text-gray-400 font-lora rounded-lg mb-6 p-2 px-4 w-full bg-white focus:ring-1 transition duration-200 hover:text-gray-800 focus:text-gray-800 border hover:border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500`}/>
                <div className='flex group-hover:hidden'>
                  <label className='relative flex flex-col items-start w-full' htmlFor='address'>
                    <input ref={address} 
                          autoFocus
                          // placeholder='0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7'
                          className={`${contract.name === undefined ? 'rounded-lg' : 'rounded-t-lg text-gray-400'}  border border-gray-300  transition duration-200 hover:text-gray-800 focus:text-gray-800  ${errors.address && 'border-red-400'}  focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 truncate py-2 px-4 md:pr-8  w-full`} 
                    />
                  </label>
                </div>
                <div className='hidden group-hover:flex'>
                  <label className='relative flex flex-col items-start w-full' htmlFor='address'>
                    <input ref={address} 
                          autoFocus
                          disabled
                          // placeholder='0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7'
                          className={`${contract.name === undefined ? 'rounded-lg' : 'rounded-t-lg text-gray-400'} bg-transparent placeholder:text-gray-300 text-gray-300 transition duration-200 hover:text-gray-800 focus:text-gray-800 border border-gray-200/70 hover:border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 truncate py-2 px-4 md:pr-8  w-full`} 
                    />
                  </label>
                </div>
                {errors.address && (
                <div className='mt-2'>
                  <p className='text-sm text-red-600'>{errors.address}</p>
                </div>
                )}
              </div>
            </div>
          </div> */}
          <ConnectWalletField />
          <div className='mx-0'>
            <div className='relative p-8 max-w-lg mx-auto sm:rounded-lg ring-1 ring-blue-100 bg-blue-50/80'>
              <p className='font-lora text-gray-500 mb-4'><i>Anyone</i> can make a form for this contract — make sure you trust it.</p>
              <div className='flex items-center space-x-3'>
                <input name="confirmaton"
                      type='checkbox'
                      className={`rounded-lg transition duration-200 hover:text-gray-800 focus:text-gray-800 border hover:border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 truncate`} 
                />
                <label htmlFor='confirmation'>I trust this form</label>
              </div>
            </div>
          </div>
          <div className='ml-8 max-w-lg mx-auto pt-8'>
            <button className="flex items-center font-karla h-min tracking-tight bg-blue-500 transition duration-200 hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 hover:text-blue-50 py-2 px-4 pr-3 rounded-lg font-medium text-white">
              <span className='mr-1.5'>Submit</span>
              <ArrowSmRightIcon className='h-5 w-5' />
            </button>
          </div>
        </div>
      </main>
    </div>
  )
}

export async function getServerSideProps(context) {
  try {
    const { id } = await context.params;
    const form = await prisma.form.findUnique({
      where: {
        id: id,
      },
    });

    const fields = await prisma.field.findMany({
      where: {
        formId: id,
      }
    });

    return { 
      props: { 
        form: JSON.parse(JSON.stringify(form)),
        fields: JSON.parse(JSON.stringify(fields)),
      } 
    }
  } catch (e) {
    console.log(e)
  }
}